---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Lou Gehrig Fan Club" description="Honoring the legacy of Lou Gehrig while raising awareness and support for ALS research.">
  <section class="text-center p-8">
    <h1 class="text-4xl font-bold mb-4">Welcome to the Lou Gehrig Fan Club</h1>
    <p class="max-w-xl mx-auto mb-6">
      Honoring the legacy of Lou Gehrig while raising awareness and support for ALS research.
    </p>
  </section>

  <section class="max-w-4xl mx-auto p-6">
    <h2 class="text-2xl font-semibold mb-3">Daily Picture Vote</h2>
    <p class="text-gray-600 mb-4">Vote for your favorite image. Winners advance daily until we crown the best picture.</p>
    <div id="vote" class="grid gap-4 md:grid-cols-2"></div>
    <p id="vote-status" class="text-sm text-gray-600 mt-3"></p>
  </section>

  <script type="module">
    import { createClient } from '@supabase/supabase-js';
    const supabase = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);

    const voteEl = document.getElementById('vote');
    const voteStatus = document.getElementById('vote-status');

    function normalize(m) {
      return {
        id: m.id,
        url: m.media_url ?? m.url,
        alt: m.alt_text ?? m.file_name ?? 'Photo'
      };
    }

    async function getTwoRandomImages() {
      const { data, error } = await supabase
        .from('media_files')
        .select('*')
        .eq('media_type', 'image')
        .order('random')
        .limit(2);
      if (error) throw error;
      return (data ?? []).map(normalize);
    }

    async function ensureAuthOrPrompt() {
      const { data } = await supabase.auth.getSession();
      if (!data?.session) {
        window.location.href = `/login?redirect=${encodeURIComponent('/')}`;
        return null;
      }
      return data.session;
    }

    async function recordVote(imageId) {
      const session = await ensureAuthOrPrompt();
      if (!session) return;
      const { error } = await supabase
        .from('picture_votes')
        .insert({ image_id: imageId, user_id: session.user.id });
      voteStatus.textContent = error ? `Vote failed: ${error.message}` : 'Thanks for voting!';
      if (!error) loadRound();
    }

    function renderPair([a, b]) {
      voteEl.innerHTML = '';
      for (const img of [a, b]) {
        const btn = document.createElement('button');
        btn.className = 'block border rounded overflow-hidden bg-white hover:shadow focus:outline-blue-600';
        btn.innerHTML = `
          <img src="${img.url || '/placeholder.svg'}" alt="${img.alt}" class="w-full h-64 object-cover bg-gray-100" loading="lazy" />
          <div class="p-3 text-center font-medium">Vote</div>
        `;
        btn.addEventListener('click', () => recordVote(img.id));
        voteEl.appendChild(btn);
      }
    }

    async function loadRound() {
      voteStatus.textContent = 'Loading picturesâ€¦';
      try {
        const pair = await getTwoRandomImages();
        if (pair.length < 2) {
          voteStatus.textContent = 'Not enough images to vote yet.';
          return;
        }
        renderPair(pair);
        voteStatus.textContent = '';
      } catch (e) {
        voteStatus.textContent = `Error: ${e.message}`;
      }
    }

    loadRound();
  </script>
</BaseLayout>
