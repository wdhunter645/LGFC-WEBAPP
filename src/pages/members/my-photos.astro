---
import BaseLayout from "../../layouts/BaseLayout.astro";
---

<BaseLayout title="My Photos | Lou Gehrig Fan Club" description="View and manage your uploaded photos." requireAuth={true}>
  <section class="max-w-6xl mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">My Photos</h1>
      <a href="/members/upload-photos" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors">
        üì∏ Upload More Photos
      </a>
    </div>

    <!-- Search and Filter -->
    <div class="mb-6 bg-white p-4 rounded-lg border">
      <div class="grid gap-4 md:grid-cols-2">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Search by Tags</label>
          <input type="text" id="tag-search" placeholder="e.g., Lou Gehrig, Yankee Stadium" 
                 class="w-full border rounded px-3 py-2" />
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
          <select id="sort-by" class="w-full border rounded px-3 py-2">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="name">File Name</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Stats -->
    <div class="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div class="text-2xl font-bold text-blue-600" id="total-photos">0</div>
        <div class="text-sm text-blue-700">Total Photos</div>
      </div>
      <div class="bg-green-50 border border-green-200 rounded-lg p-4">
        <div class="text-2xl font-bold text-green-600" id="tagged-photos">0</div>
        <div class="text-sm text-green-700">Tagged Photos</div>
      </div>
      <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
        <div class="text-2xl font-bold text-purple-600" id="total-tags">0</div>
        <div class="text-sm text-purple-700">Unique Tags</div>
      </div>
    </div>

    <!-- Photos Grid -->
    <div id="photos-container">
      <div id="loading" class="text-center py-8">
        <div class="text-gray-500">Loading your photos...</div>
      </div>
      <div id="photos-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 hidden"></div>
      <div id="no-photos" class="text-center py-8 hidden">
        <div class="text-4xl mb-4">üì∏</div>
        <h3 class="text-xl font-semibold mb-2">No photos yet</h3>
        <p class="text-gray-600 mb-4">Upload your first photo to get started!</p>
        <a href="/members/upload-photos" class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition-colors">
          Upload Photos
        </a>
      </div>
    </div>
  </section>

  <script type="module">
    import { createClient } from '@supabase/supabase-js';
    const supabase = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);

    // DOM elements
    const tagSearch = document.getElementById('tag-search');
    const sortBy = document.getElementById('sort-by');
    const loading = document.getElementById('loading');
    const photosGrid = document.getElementById('photos-grid');
    const noPhotos = document.getElementById('no-photos');
    const totalPhotos = document.getElementById('total-photos');
    const taggedPhotos = document.getElementById('tagged-photos');
    const totalTags = document.getElementById('total-tags');

    let allPhotos = [];
    let filteredPhotos = [];

    // Load photos on page load
    loadPhotos();

    // Search and filter functionality
    tagSearch.addEventListener('input', filterPhotos);
    sortBy.addEventListener('change', filterPhotos);

    async function loadPhotos() {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return;

        const { data, error } = await supabase.rpc('get_member_photos', { user_id: user.id });
        
        if (error) {
          console.error('Error loading photos:', error);
          return;
        }

        allPhotos = data || [];
        updateStats();
        filterPhotos();

      } catch (error) {
        console.error('Error:', error);
      }
    }

    function updateStats() {
      totalPhotos.textContent = allPhotos.length;
      
      const taggedCount = allPhotos.filter(photo => photo.tags && photo.tags.length > 0).length;
      taggedPhotos.textContent = taggedCount;
      
      const allTags = new Set();
      allPhotos.forEach(photo => {
        if (photo.tags) {
          photo.tags.forEach(tag => allTags.add(tag));
        }
      });
      totalTags.textContent = allTags.size;
    }

    function filterPhotos() {
      const searchTerm = tagSearch.value.toLowerCase();
      const sortValue = sortBy.value;

      // Filter by tags
      filteredPhotos = allPhotos.filter(photo => {
        if (!searchTerm) return true;
        if (!photo.tags) return false;
        return photo.tags.some(tag => tag.toLowerCase().includes(searchTerm));
      });

      // Sort photos
      filteredPhotos.sort((a, b) => {
        switch (sortValue) {
          case 'oldest':
            return new Date(a.created_at) - new Date(b.created_at);
          case 'name':
            return (a.original_name || a.file_name).localeCompare(b.original_name || b.file_name);
          case 'newest':
          default:
            return new Date(b.created_at) - new Date(a.created_at);
        }
      });

      displayPhotos();
    }

    function displayPhotos() {
      loading.classList.add('hidden');
      
      if (filteredPhotos.length === 0) {
        photosGrid.classList.add('hidden');
        noPhotos.classList.remove('hidden');
        return;
      }

      noPhotos.classList.add('hidden');
      photosGrid.classList.remove('hidden');
      photosGrid.innerHTML = '';

      filteredPhotos.forEach(photo => {
        const photoCard = createPhotoCard(photo);
        photosGrid.appendChild(photoCard);
      });
    }

    function createPhotoCard(photo) {
      const card = document.createElement('div');
      card.className = 'border rounded-lg overflow-hidden bg-white hover:shadow-md transition-shadow';
      
      const tags = photo.tags || [];
      const tagDisplay = tags.length > 0 ? tags.slice(0, 3).join(', ') + (tags.length > 3 ? '...' : '') : 'No tags';
      
      card.innerHTML = `
        <div class="relative">
          <img src="${photo.media_url}" alt="${photo.alt_text || photo.original_name}" 
               class="w-full h-48 object-cover" loading="lazy" />
          <div class="absolute top-2 right-2">
            <button class="bg-white bg-opacity-90 rounded-full p-1 hover:bg-opacity-100 transition-colors edit-photo-btn"
                    data-photo-id="${photo.id}">
              ‚úèÔ∏è
            </button>
          </div>
        </div>
        <div class="p-4">
          <h3 class="font-semibold mb-2 truncate" title="${photo.original_name || photo.file_name}">
            ${photo.original_name || photo.file_name}
          </h3>
          ${photo.alt_text ? `<p class="text-sm text-gray-600 mb-2 line-clamp-2">${photo.alt_text}</p>` : ''}
          <div class="mb-3">
            <span class="text-xs font-medium text-gray-500">Tags:</span>
            <p class="text-sm text-gray-700">${tagDisplay}</p>
          </div>
          <div class="text-xs text-gray-500">
            Uploaded ${new Date(photo.created_at).toLocaleDateString()}
          </div>
        </div>
      `;

      // Add edit functionality
      const editBtn = card.querySelector('.edit-photo-btn');
      editBtn.addEventListener('click', () => editPhoto(photo, card));

      return card;
    }

    function editPhoto(photo, card) {
      const newTags = prompt('Enter tags (separated by commas):', (photo.tags || []).join(', '));
      if (newTags === null) return; // User cancelled

      const newDescription = prompt('Enter description:', photo.alt_text || '');
      if (newDescription === null) return; // User cancelled

      const tags = newTags.split(',').map(tag => tag.trim()).filter(tag => tag);

      updatePhoto(photo.id, tags, newDescription, card);
    }

    async function updatePhoto(photoId, tags, description, card) {
      try {
        const { error } = await supabase
          .from('media_files')
          .update({
            tags: tags,
            alt_text: description
          })
          .eq('id', photoId);

        if (error) throw error;

        // Update the photo in our arrays
        const photoIndex = allPhotos.findIndex(p => p.id === photoId);
        if (photoIndex !== -1) {
          allPhotos[photoIndex].tags = tags;
          allPhotos[photoIndex].alt_text = description;
        }

        const filteredIndex = filteredPhotos.findIndex(p => p.id === photoId);
        if (filteredIndex !== -1) {
          filteredPhotos[filteredIndex].tags = tags;
          filteredPhotos[filteredIndex].alt_text = description;
        }

        // Update display
        updateStats();
        displayPhotos();

        // Show success feedback
        const editBtn = card.querySelector('.edit-photo-btn');
        editBtn.textContent = '‚úÖ';
        setTimeout(() => {
          editBtn.textContent = '‚úèÔ∏è';
        }, 2000);

      } catch (error) {
        console.error('Error updating photo:', error);
        alert('Failed to update photo. Please try again.');
      }
    }
  </script>
</BaseLayout>