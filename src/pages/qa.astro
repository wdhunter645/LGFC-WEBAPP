---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Q&A | Lou Gehrig Fan Club" description="Public Q&A threads for visitors and members.">
  <section class="max-w-4xl mx-auto p-6">
    <h1 class="text-3xl font-bold mb-4">Q&amp;A</h1>

    <form id="new-thread" class="space-y-3 mb-6">
      <input id="title" required class="w-full border rounded px-3 py-2" placeholder="Start a new thread (title)…" />
      <textarea id="body" class="w-full border rounded px-3 py-2" rows="4" placeholder="Details (optional)"></textarea>
      <button class="border rounded px-4 py-2">Post</button>
      <p id="post-status" class="text-sm text-gray-600"></p>
    </form>

    <p id="status" class="text-gray-600">Loading…</p>
    <ul id="threads" class="space-y-4 mt-4"></ul>
  </section>

  <script type="module">
    import { createClient } from '@supabase/supabase-js';
    const supabase = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);

    const newForm = document.getElementById('new-thread');
    const titleEl = document.getElementById('title');
    const bodyEl = document.getElementById('body');
    const postStatus = document.getElementById('post-status');
    const statusEl = document.getElementById('status');
    const threadsEl = document.getElementById('threads');

    function normalize(t) {
      return {
        id: t.id,
        title: t.title ?? t.subject ?? 'Untitled',
        body: t.body ?? t.text ?? '',
        created_at: t.created_at ?? t.inserted_at ?? new Date().toISOString(),
        author: t.author ?? t.created_by_email ?? 'Anonymous'
      };
    }

    async function ensureAuthOrPrompt() {
      const { data } = await supabase.auth.getSession();
      if (!data?.session) {
        window.location.href = `/login?redirect=${encodeURIComponent('/qa')}`;
        return null;
      }
      return data.session;
    }

    async function postThread(e) {
      e.preventDefault();
      postStatus.textContent = '';
      const session = await ensureAuthOrPrompt();
      if (!session) return;
      const title = titleEl.value.trim();
      const body = bodyEl.value.trim();
      if (!title) {
        postStatus.textContent = 'Title required.';
        return;
      }
      const { error } = await supabase.from('qa_threads').insert({
        title,
        body,
        created_by: session.user.id
      });
      postStatus.textContent = error ? `Error: ${error.message}` : 'Posted!';
      if (!error) {
        titleEl.value = '';
        bodyEl.value = '';
        loadThreads();
      }
    }

    async function loadThreads() {
      statusEl.textContent = 'Loading…';
      threadsEl.innerHTML = '';
      const { data, error } = await supabase
        .from('qa_threads')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);
      if (error) {
        statusEl.textContent = `Error: ${error.message}`;
        return;
      }
      const items = (data ?? []).map(normalize);
      if (!items.length) {
        statusEl.textContent = 'No threads yet.';
        return;
      }
      statusEl.remove();
      for (const t of items) {
        const li = document.createElement('li');
        li.className = 'border p-4 rounded bg-white';
        li.innerHTML = `
          <div class="font-semibold">${t.title}</div>
          <div class="text-xs text-gray-500">${new Date(t.created_at).toLocaleString()} • ${t.author}</div>
          ${t.body ? `<p class="mt-2">${t.body}</p>` : ''}
        `;
        threadsEl.appendChild(li);
      }
    }

    newForm.addEventListener('submit', postThread);
    loadThreads();
  </script>
</BaseLayout>