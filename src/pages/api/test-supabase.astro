---
// Test endpoint to verify Supabase connection from Netlify
import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = import.meta.env.SUPABASE_URL ||
                     import.meta.env.VITE_SUPABASE_URL;

const SUPABASE_PUBLIC_API_KEY = import.meta.env.SUPABASE_PUBLIC_API_KEY ||
                               import.meta.env.VITE_SUPABASE_ANON_KEY;

if (Astro.request.method === 'POST') {
  try {
    if (!SUPABASE_URL || !SUPABASE_PUBLIC_API_KEY) {
      return new Response(JSON.stringify({
        success: false,
        error: 'Missing Supabase configuration',
        timestamp: new Date().toISOString()
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLIC_API_KEY);
    
    // Test database connection
    const { data, error } = await supabase
      .from('search_state')
      .select('*')
      .limit(1);

    if (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error.message,
        url: SUPABASE_URL,
        timestamp: new Date().toISOString()
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    return new Response(JSON.stringify({
      success: true,
      message: 'Supabase connection successful',
      url: SUPABASE_URL,
      data_received: !!data,
      timestamp: new Date().toISOString()
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error: unknown) {
    return new Response(JSON.stringify({
      success: false,
      error: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
---

<html>
<head>
  <title>Supabase Connection Test</title>
  <style>
    body { font-family: sans-serif; padding: 2rem; max-width: 800px; margin: 0 auto; }
    .status { padding: 1rem; border-radius: 8px; margin: 1rem 0; }
    .success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
    .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
    .info { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
    button { background: #007bff; color: white; border: none; padding: 0.5rem 1rem; border-radius: 4px; cursor: pointer; }
    button:hover { background: #0056b3; }
    pre { background: #f8f9fa; padding: 1rem; border-radius: 4px; overflow-x: auto; }
  </style>
</head>
<body>
  <h1>üîó Supabase Connection Test</h1>
  <p>This page tests the connection between Netlify and Supabase.</p>
  
  <div class="info status">
    <strong>Configuration:</strong><br>
    URL: {SUPABASE_URL}<br>
    API Key: {SUPABASE_PUBLIC_API_KEY.substring(0, 20)}...<br>
    Environment: {import.meta.env.MODE || 'production'}
  </div>

  <button id="test-connection">Test Supabase Connection</button>
  
  <div id="result"></div>

  <script>
    async function testConnection() {
      const resultDiv = document.getElementById('result');
      resultDiv.innerHTML = '<div class="info status">Testing connection...</div>';
      
      try {
        const response = await fetch('/api/test-supabase', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const result = await response.json();
        
        if (result.success) {
          resultDiv.innerHTML = `
            <div class="success status">
              <strong>‚úÖ Connection Successful!</strong><br>
              ${result.message}<br>
              <small>Timestamp: ${result.timestamp}</small>
            </div>
            <pre>${JSON.stringify(result, null, 2)}</pre>
          `;
        } else {
          resultDiv.innerHTML = `
            <div class="error status">
              <strong>‚ùå Connection Failed</strong><br>
              ${result.error}<br>
              <small>Timestamp: ${result.timestamp}</small>
            </div>
            <pre>${JSON.stringify(result, null, 2)}</pre>
          `;
        }
      } catch (error) {
        resultDiv.innerHTML = `
          <div class="error status">
            <strong>‚ùå Test Failed</strong><br>
            ${error.message}
          </div>
        `;
      }
    }

    document
      .getElementById('test-connection')
      ?.addEventListener('click', testConnection);
  </script>
</body>
</html>
