name: Ops-Bot: Alert on Workflow Failure

on:
  workflow_run:
    workflows:
      - CI
      - search-cron
      - Traffic Simulator
      - Traffic Simulator (Monitored)
      - Supabase Daily Schema Backup
      - Supabase Weekly Full Backup
      - Supabase Monthly Full Backup
    types:
      - completed

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  alert:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    steps:
      - name: Prepare alert body
        id: prep
        run: |
          NAME="${{ github.event.workflow_run.name }}"
          CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          STATUS="${{ github.event.workflow_run.status }}"
          HTML_URL="${{ github.event.workflow_run.html_url }}"
          STARTED="${{ github.event.workflow_run.run_started_at }}"
          RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          COMMIT="${{ github.event.workflow_run.head_sha }}"

          cat > body.txt <<EOF
          # Ops Alert: ${NAME} failed

          - Repo: ${REPO}
          - Branch: ${BRANCH}
          - Run: #${RUN_NUMBER}
          - Status: ${STATUS}
          - Conclusion: ${CONCLUSION}
          - Started: ${STARTED}
          - Commit: ${COMMIT}
          - Logs: ${HTML_URL}

          Next: Investigate failing step, post root cause, and fix. If transient, note mitigation.
          EOF
          echo "body<<__BODY__" >> $GITHUB_OUTPUT
          cat body.txt >> $GITHUB_OUTPUT
          echo "__BODY__" >> $GITHUB_OUTPUT

      - name: Create or update consolidated Ops Alerts issue
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const title = 'Ops Alerts (auto)';
            const body = core.getInput('body', { required: false }) || '';
            // Pass body via step output to avoid quoting issues
            const prepared = `${{ steps.prep.outputs.body }}`;

            // Search for an open consolidated Ops Alerts issue
            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue in:title "${title}" state:open`
            });

            if (search.data.total_count > 0) {
              const issue = search.data.items[0];
              const { data: updated } = await github.rest.issues.createComment({
                owner, repo, issue_number: issue.number, body: prepared
              });
              core.summary.addHeading('Updated Ops Alerts issue').addLink(title, issue.html_url).write();
            } else {
              const { data: created } = await github.rest.issues.create({
                owner, repo, title, body: prepared, labels: ['ops', 'alert']
              });
              core.summary.addHeading('Created Ops Alerts issue').addLink(title, created.html_url).write();
            }

      - name: Optional Slack notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL}" ]; then
            NAME="${{ github.event.workflow_run.name }}"
            CONCLUSION="${{ github.event.workflow_run.conclusion }}"
            HTML_URL="${{ github.event.workflow_run.html_url }}"
            REPO="${{ github.repository }}"
            BRANCH="${{ github.event.workflow_run.head_branch }}"
            TEXT="Ops Alert: ${NAME} (${REPO}@${BRANCH}) â€” ${CONCLUSION}. ${HTML_URL}"
            PAYLOAD=$(printf '{"text":"%s"}' "${TEXT}")
            curl -s -X POST -H 'Content-type: application/json' --data "${PAYLOAD}" "${SLACK_WEBHOOK_URL}" || true
          else
            echo "No SLACK_WEBHOOK_URL configured; skipping Slack notification."
          fi
