name: SLA Nudge for Stale Issues

on:
  schedule:
    - cron: '0 13 * * 1-5' # Weekdays 9am New York approx (13 UTC in EDT)
  workflow_dispatch:

jobs:
  nudge:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Nudge stale issues by SLA
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          node -e '
          const fetchJson = async (url, init={}) => {
            const res = await fetch(url, { ...init, headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}`, Accept: "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" } });
            if (!res.ok) throw new Error(await res.text());
            return res.json();
          };
          (async () => {
            const repo = process.env.GITHUB_REPOSITORY;
            const q = encodeURIComponent(`repo:${repo} is:open label:project-issue`);
            const data = await fetchJson(`https://api.github.com/search/issues?q=${q}&per_page=100`);
            const now = new Date();
            for (const issue of data.items) {
              const updated = new Date(issue.updated_at);
              const days = (now - updated) / 86400000;
              let threshold = 5; // default P3
              if (issue.labels.find(l => l.name === "sla:P1")) threshold = 0.5; // 12h
              else if (issue.labels.find(l => l.name === "sla:P2")) threshold = 2; // 2 days
              if (days > threshold) {
                await fetchJson(issue.url + "/comments", { method: "POST", body: JSON.stringify({ body: `Automated nudge: no updates in ~${days.toFixed(1)} days. Please update status or adjust SLA.` }) });
                await fetchJson(issue.url, { method: "PATCH", body: JSON.stringify({ labels: [...issue.labels.map(l=>l.name), "needs-attention"] }) });
                console.log("Nudged #" + issue.number);
              }
            }
          })().catch(e => { console.error(e); process.exit(0); });
          '

