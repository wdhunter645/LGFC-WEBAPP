name: Dev-Bot: Daily Plan

on:
  workflow_dispatch:
  schedule:
    # Run at both 10:00 and 11:00 UTC to cover EDT/EST; self-gate to 6am US/Eastern
    - cron: '0 10 * * *'
    - cron: '0 11 * * *'

permissions:
  contents: read
  issues: write

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Run only at 6am US/Eastern
        run: |
          HOUR=$(TZ=America/New_York date +%H)
          if [ "$HOUR" != "06" ]; then
            echo "Not 6am US/Eastern (current hour $HOUR), exiting."
            exit 0
          fi
      - uses: actions/checkout@v4
      - name: Build Dev Plan Issue
        id: gen
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            // Collect open issues labeled with 'dev' or 'feature' as candidates
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner, repo, state: 'open', per_page: 100, labels: 'dev,feature'
            }).catch(() => []);

            const lines = [];
            lines.push(`# Dev-Bot Daily Plan (${new Date().toISOString().slice(0,10)})`);
            lines.push('');
            if (!issues.length) {
              lines.push('- No dev-labeled issues open.');
            } else {
              for (const i of issues) {
                const assignees = (i.assignees || []).map(a => `@${a.login}`).join(', ') || 'Unassigned';
                const labels = (i.labels || []).map(l => typeof l === 'string' ? l : l.name).join(', ');
                lines.push(`- #${i.number} ${i.title} â€” ${assignees} (${labels})`);
              }
            }
            core.setOutput('body', lines.join('\n'));
      - name: Create/Update Dev Daily Plan
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const today = new Date().toISOString().slice(0,10);
            const title = `Dev Daily Plan - ${today}`;
            const body = `${{ steps.gen.outputs.body }}`;
            const { data: existing } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue in:title "${title}" state:open`
            });
            if (existing.total_count > 0) {
              const issue = existing.items[0];
              await github.rest.issues.update({ owner, repo, issue_number: issue.number, body });
              core.summary.addHeading('Updated Dev Daily Plan').addLink(title, issue.html_url).write();
            } else {
              const { data: created } = await github.rest.issues.create({ owner, repo, title, body, labels: ['dev', 'plan'] });
              core.summary.addHeading('Created Dev Daily Plan').addLink(title, created.html_url).write();
            }

