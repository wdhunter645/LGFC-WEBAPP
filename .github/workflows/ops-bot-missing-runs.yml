name: Ops-Bot: Detect Missing Runs

on:
  schedule:
    - cron: '0 * * * *' # hourly
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  check-missing:
    runs-on: ubuntu-latest
    steps:
      - name: Check critical workflows for missing runs in last 2 hours
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const critical = [
              'CI',
              'search-cron',
              'Traffic Simulator',
              'Supabase Daily Schema Backup'
            ];
            const sinceMs = 2 * 60 * 60 * 1000; // 2 hours
            const now = Date.now();

            const missing = [];
            for (const name of critical) {
              const runs = await github.paginate(github.rest.actions.listWorkflowRunsForRepo, { owner, repo, per_page: 100 });
              const latest = runs.find(r => (r.name === name));
              if (!latest) {
                missing.push({ name, reason: 'no runs found' });
                continue;
              }
              const started = new Date(latest.run_started_at).getTime();
              if ((now - started) > sinceMs) {
                missing.push({ name, reason: `stale (last started ${latest.run_started_at})`, url: latest.html_url });
              }
            }

            if (!missing.length) {
              core.summary.addHeading('No missing runs detected in last 2 hours').write();
              return;
            }

            const lines = ['# Ops: Missing Runs Detected', ''];
            for (const m of missing) {
              lines.push(`- ${m.name}: ${m.reason}${m.url ? ' â€” ' + m.url : ''}`);
            }

            // Create/update consolidated issue
            const title = 'Ops Alerts (missing runs)';
            const search = await github.rest.search.issuesAndPullRequests({ q: `repo:${owner}/${repo} is:issue in:title "${title}" state:open` });
            const body = lines.join('\n');
            try {
              if (search.data.total_count > 0) {
                const issue = search.data.items[0];
                await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body });
                await github.rest.issues.addLabels({ owner, repo, issue_number: issue.number, labels: ['ops'] }).catch(() => {});
              } else {
                await github.rest.issues.create({ owner, repo, title, body, labels: ['ops'] });
              }
            } catch (e) {
              core.warning('Failed to write GitHub Issue (likely permissions): ' + (e && e.message));
            }
