name: Ops-Bot: Triage Failed Runs

on:
  workflow_run:
    workflows:
      - CI
      - search-cron
      - Traffic Simulator
      - Traffic Simulator (Monitored)
      - Supabase Daily Schema Backup
      - Supabase Weekly Full Backup
      - Supabase Monthly Full Backup
    types:
      - completed

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  triage:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    steps:
      - name: Create or update per-failure Issue
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const wr = context.payload.workflow_run;
            const name = wr.name;
            const conclusion = wr.conclusion;
            const runNumber = wr.run_number;
            const htmlUrl = wr.html_url;
            const branch = wr.head_branch;
            const commit = wr.head_sha;
            const actor = (wr.actor && wr.actor.login) || undefined;

            const title = `OPS: ${name} failed (run #${runNumber} on ${branch})`;

            // Avoid duplicates: search for open issue with same title
            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue in:title "${title}" state:open`
            });

            const body = [
              `Workflow: ${name}`,
              `Branch: ${branch}`,
              `Run: #${runNumber}`,
              `Conclusion: ${conclusion}`,
              `Commit: ${commit}`,
              `Logs: ${htmlUrl}`,
              '',
              'Next: Investigate failing step, document root cause, and fix. If transient, note mitigation.'
            ].join('\n');

            if (search.data.total_count > 0) {
              const issue = search.data.items[0];
              await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body });
              await github.rest.issues.addLabels({ owner, repo, issue_number: issue.number, labels: ['ops', 'priority:high'] }).catch(() => {});
              if (actor) { await github.rest.issues.addAssignees({ owner, repo, issue_number: issue.number, assignees: [actor] }).catch(() => {}); }
            } else {
              const { data: created } = await github.rest.issues.create({ owner, repo, title, body, labels: ['ops', 'priority:high'] });
              if (actor) { await github.rest.issues.addAssignees({ owner, repo, issue_number: created.number, assignees: [actor] }).catch(() => {}); }
              await core.summary.addHeading('Created ops triage issue').addLink(title, created.html_url).write();
            }
