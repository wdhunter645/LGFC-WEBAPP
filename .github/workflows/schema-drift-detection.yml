---
name: Schema Drift Detection

"on":
  schedule:
    # Run every 4 hours to catch schema changes quickly
    - cron: "0 */4 * * *"
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write    # For committing schema monitoring data
  issues: write      # For creating drift alert issues

jobs:
  detect-schema-drift:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Supabase CLI
        run: |
          curl -fsSL https://supabase.com/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Login to Supabase
        run: |
          echo ${{ secrets.SUPABASE_ACCESS_TOKEN }} | supabase login

      - name: Link to Supabase project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Create schema baseline directory
        run: |
          mkdir -p schema-monitoring

      - name: Generate current schema snapshot
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          supabase \
          db dump --schema-only --file "schema-monitor/current_schema_${TIMESTAMP}.sql"

      - name: Compare with latest baseline
        run: |
          echo "=== Schema Drift Detection - $(date) ===" > schema-monitor/drift-report.log

          # Find the most recent baseline schema
          if [ -f "schema-monitoring/baseline_schema.sql" ]; then
            echo "Found baseline schema for comparison" >> schema-monitor/drift-report.log

            # Get current schema file
            current_schema=$(ls -t schema-monitor/current_schema_*.sql | head -1)

            # Compare schemas
            if diff -q "schema-monitor/baseline_schema.sql" "$current_schema" >/dev/null; then
              echo "✅ No schema drift detected" >> schema-monitor/drift-report.log
              echo "Current schema matches baseline" >> schema-monitor/drift-report.log
            else
              echo "⚠️ SCHEMA DRIFT DETECTED!" >> schema-monitor/drift-report.log
              echo "Changes found between baseline and current schema:" >> schema-monitor/drift-report.log
              echo "" >> schema-monitoring/drift-report.log

              # Generate detailed diff
              diff -u "schema-monitor/baseline_schema.sql" "$current_schema" >> schema-monitor/drift-report.log || true

              # Count changes
              added_lines=$(diff "schema-monitor/baseline_schema.sql" "$current_schema" | grep "^>" | wc -l)
              removed_lines=$(diff "schema-monitor/baseline_schema.sql" "$current_schema" | grep "^<" | wc -l)

              echo "" >> schema-monitoring/drift-report.log
              echo "Change summary:" >> schema-monitoring/drift-report.log
              echo "- Lines added: $added_lines" >> schema-monitor/drift-report.log
              echo "- Lines removed: $removed_lines" >> schema-monitor/drift-report.log
            fi
          else
            echo "⚠️ No baseline schema found - creating initial baseline" >> schema-monitor/drift-report.log
            cp "$current_schema" "schema-monitoring/baseline_schema.sql"
            echo "Baseline schema created from current state" >> schema-monitor/drift-report.log
          fi

      - name: Analyze schema for potential issues
        run: |
          current_schema=$(ls -t schema-monitor/current_schema_*.sql | head -1)
          echo "" >> schema-monitoring/drift-report.log
          echo "=== Schema Analysis ===" >> schema-monitoring/drift-report.log

          # Check for common issues
          table_count=$(grep -c "CREATE TABLE" "$current_schema" || echo "0")
          index_count=$(grep -c "CREATE.*INDEX" "$current_schema" || echo "0")
          constraint_count=$(grep -c "CONSTRAINT\|FOREIGN KEY" "$current_schema" || echo "0")

          echo "Schema statistics:" >> schema-monitoring/drift-report.log
          echo "- Tables: $table_count" >> schema-monitoring/drift-report.log
          echo "- Indexes: $index_count" >> schema-monitoring/drift-report.log
          echo "- Constraints: $constraint_count" >> schema-monitor/drift-report.log

          # Check for potential security issues
          if grep -q "WITHOUT ROW LEVEL SECURITY" "$current_schema"; then
            echo "⚠️ Found tables without Row Level Security" >> schema-monitor/drift-report.log
          else
            echo "✅ All tables appear to have Row Level Security" >> schema-monitor/drift-report.log
          fi

          # Check for required tables based on application needs
          required_tables=("events" "faq_items" "visitors" "visitor_votes" "search_state" "content_items")
          echo "" >> schema-monitoring/drift-report.log
          echo "Required table check:" >> schema-monitoring/drift-report.log

          for table in "${required_tables[@]}"; do
            if grep -q "CREATE TABLE.*$table" "$current_schema"; then
              echo "✅ Table '$table' exists" >> schema-monitor/drift-report.log
            else
              echo "❌ Required table '$table' missing!" >> schema-monitor/drift-report.log
            fi
          done

      - name: Display drift report
        run: |
          echo "Schema drift detection report:"
          cat schema-monitoring/drift-report.log

      - name: Check for critical schema issues
        run: |
          if grep -q "❌\|SCHEMA DRIFT DETECTED" schema-monitor/drift-report.log; then
            echo "::warning::Critical schema issues detected - review required"
          fi

          # Count missing required tables
          missing_tables=$(grep -c "❌.*missing" schema-monitor/drift-report.log || echo "0")
          if [ $missing_tables -gt 0 ]; then
            echo "::error::$missing_tables required tables are missing from schema"
            exit 1
          fi

      - name: Create issue for schema drift
        if: contains(github.event_name, 'schedule') && success()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const driftReport = fs.readFileSync('schema-monitor/drift-report.log', 'utf8');

            // Check if there's schema drift or missing tables
            const hasDrift = driftReport.includes('SCHEMA DRIFT DETECTED');
            const hasMissingTables = driftReport.includes('❌') && driftReport.includes('missing');

            if (hasDrift || hasMissingTables) {
              const dateStr = new Date().toISOString().split('T')[0];
              const timeStr = new Date().toISOString();
              const workflowUrl = context.payload.repository.html_url + '/actions/runs/' + context.runId;

              let issuesText = '';
              if (hasDrift) issuesText += '⚠️ Schema changes detected\n';
              if (hasMissingTables) issuesText += '❌ Missing required tables\n';

              const bodyParts = [
                '## Schema Drift Detection Alert',
                '',
                'Time: ' + timeStr,
                'Workflow: [Schema Drift Detection](' + workflowUrl + ')',
                '',
                '### Detected Issues:',
                issuesText,
                '',
                '### Full Report:',
                '```',
                driftReport,
                '```',
                '',
                '### Actions Required:',
                '1. Review the schema changes in the drift report above',
                '2. If changes are legitimate, run the workflow manually to update baseline: `gh workflow run schema-drift-detect.yml`',
                '3. If changes are unexpected, investigate potential unauthorized modifications',
                '',
                'Assigned to ops-bot for triage'
              ];

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Schema Drift Alert - ' + dateStr,
                body: bodyParts.join('\n'),
                labels: ['ops', 'schema-drift', 'priority:high']
              });
            }

      - name: Update baseline on approval
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Manual workflow runs can update the baseline
          current_schema=$(ls -t schema-monitor/current_schema_*.sql | head -1)
          cp "$current_schema" "schema-monitoring/baseline_schema.sql"
          echo "Baseline schema updated manually via workflow dispatch" >> schema-monitor/drift-report.log

      - name: Cleanup old snapshots
        run: |
          # Keep only the last 5 schema snapshots
          cd schema-monitoring
          ls -t current_schema_*.sql | tail -n +6 | xargs rm -f || true

      - name: Commit schema monitoring data
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add schema-monitoring/
          git commit -m "Schema drift detect - $(date +"%Y-%m-%d %H:%M")" || echo "No schema changes to commit"
          git push
